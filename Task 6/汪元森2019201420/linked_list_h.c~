#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Linked_List_Node{
	struct Linked_List_Node *pre , *nxt ;
	int id ;
} Node ;

typedef struct Linked_List{
	Node **st , *nd ;
	int cnt , siz ;
	int *Lpos , *Rpos ;
} LST ;

LST A ;
int min_int( int a , int b ){
	return a < b ? a : b ;
}

void init_LST( LST *x , int len ){
	x->cnt = sqrt( len ) , x->siz = len / x->cnt ;
	if( x->siz * x->cnt < len ) x->siz ++ ;
	printf( "%d %d\n" , x->cnt , x->siz ) ;

	x->nd = malloc( len * sizeof( Node ) ) ;
	x->st = malloc( ( x->cnt + 5 ) * sizeof( void* ) ) ;
	x->Lpos = malloc( ( x->cnt + 5 ) * sizeof( int ) ) ;
	x->Rpos = malloc( ( x->cnt + 5 ) * sizeof( int ) ) ;
	x->nd[0] = ( Node ){ &x->nd[len-1] , &x->nd[1] , 1 } ;
	for( int i = 1 ; i < len - 1 ; i ++ )
		x->nd[i] = ( Node ){ &x->nd[i-1] , &x->nd[i+1] , i + 1 } ;
	x->nd[len-1] = ( Node ){ &x->nd[len-2] , &x->nd[0] , len } ;

	x->Lpos[0] = 0 ;
	for( int i = 1 ; i <= x->cnt ; i ++ ){
		x->Lpos[i] = x->Lpos[i-1] + 1 ;
		x->Rpos[i] = min_int( x->Lpos[i] + x->siz - 1 , len ) ;
		x->st[i] = &x->nd[ x->Lpos[i] ] ;
	}
}

void kill_LST( LST *x ){
	free( x->nd ) ;
	free( x->st ) ;
	free( x->Lpos ) ;
	free( x->Rpos ) ;
}

void del_Node( Node *nd ){
	nd->pre->nxt = nd->nxt ;
	nd->nxt->pre = nd->pre ;
}

Node *find_knxt( Node *nd , int k ){
	while( k ) nd = nd->nxt , k -- ;
	return nd ;
}

int main(){
	init_LST( &A , 100 ) ;
	printf( "%d" , find_knxt( A.st[1] , 50 )->id ) ;
	del_Node( A.st[1] , 50 ) ;
	printf( "%d" , find_knxt( A.st[1] , 50 )->id ) ;

	kill_LST( &A ) ;
}
